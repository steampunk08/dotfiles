#!/usr/bin/env bash

export TRASH_DIR=$HOME/.trash
# export TRASH_INDEX=$TRASH_DIR/.trash.index
# export TRASH_INDEX_TEMP=${TRASH_INDEX}.tmp

# TODO: rework and or implement new remove feature
show_usage() {
   cat <<USAGE 
Usage: trash [options] [args]

Commands
   (a)dd    FILENAME(S)  add files to \$TRASH_DIR this also adds an
                         entry to the \$TRASH_INDEX file.

   (em)pty  [ PATTERN ]  delete all files in \$TRASH_DIR, if PATTERN
                         is not given. Otherwise all files matching
                         PATTERN (a standard asterisk glob pattern)
                         are deleted.

   (l)ist                list files currently under \$TRASH_DIR

   (en)able              Enable trash. When enabled files will be
                         moved to \$TRASH_DIR otherwise the files
                         are deleted.

   (d)isable             Disable trash.
   (h)elp                show this message
USAGE
# remove [ -d DIR ] FILENAME(S)  remove files from \$TRASH_DIR. If
                               # DIR is given files are moved to
                               # DIR. Otherwise the files are
                               # returned to the directory in which
                               # they were put into \$TRASH_DIR from.
}

usage_on_error() {
   show_usage
   exit 1
}

DUMY_TRASH_INDEX=$TRASH_INDEX

if [[ ! -d $TRASH_DIR ]]; then
   mkdir -p $TRASH_DIR
fi

write_trash_entry() {
   echo $(realpath $1) >> $DUMY_TRASH_INDEX
}

# strip_trash_entry() {
   # local IFS="
# "
   # cat $TRASH_INDEX | while read entry; do
      # if [[ $(basename $entry) != $1 ]]; then
         # DUMY_TRASH_INDEX=$TRASH_INDEX_TEMP
         # write_trash_entry $entry
      # fi
   # done
   # DUMY_TRASH_INDEX=$TRASH_INDEX
   # mv $TRASH_INDEX_TEMP $TRASH_INDEX
# }

add_to_trash() {
   # for entry in $@; do
   # write_trash_entry $entry
   # done
   if [ -f ~/.trash_disabled ]; then
      rm $@
   else
      mv $@ $TRASH_DIR
   fi
}

# remove_from_trash() {
   # mv $TRASH_DIR/$1 $2
   # strip_trash_entry $1
# }

# remove_from_trash_bulk() {
# }

case $1 in
   a | add )
      if [[ -z $2 ]]; then
         usage_on_error
      fi
      shift 1
      add_to_trash $@ ;;

   em | empty ) 
      read -p "You sure you want to empty the trash (Y/n)? " response
      if [[ $response = "Y" ]] || [[ $response = "y" ]]; then
         rm -rf $TRASH_DIR
      fi ;;
   en | enable )
      rm ~/.trash_disabled 2>/dev/null
      ;;
   d | disable )
      touch ~/.trash_disabled
      ;;
   l | list ) ls $TRASH_DIR ;;
   # remove )
      # # DIR=$()
      # if [[ $2 = "-d" ]] && [[ -n $3 ]]; then
         # DIR=$3
      # fi ;;
   h | help ) show_usage ;;
esac

#strip_trash_entry Packages.1
#write_trash_entry $1
