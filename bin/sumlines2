#!/usr/bin/env /python3

import argparse
import os
import re

parser = argparse.ArgumentParser(
    description="Works out line count in files within a directory."
)

parser.add_argument("directory", nargs="*", help="")
parser.add_argument("-x", "--exclude", help="exclude files according to pattern", type=re.compile)
parser.add_argument("--skip-blank", action="store_true", help="do not count blank lines")

args = parser.parse_args()

def error(child, reason):
    CS = "\033[38;5;244m"
    CE = "\033[0m"

    print(f"-\t{child} ({CS}{reason}{CE})")

breaking = False

def recurse_count(parent):
    global breaking
    total = 0

    if not os.path.exists(parent):
        error(parent, "folder does not exist")
        return 0

    if breaking:
        return 0

    try:
        children = os.listdir(parent)
    except PermissionError:
        error(parent, "permission to read denied")
        return 0

    CS = "\033[38;5;248m"
    CE = "\033[0m"

    for child in children:
        if breaking:
            return total

        child = os.path.join(parent, child)

        if args.exclude is not None:
            if args.exclude.search(child):
                error(child, "file excluded by pattern")
                continue

        try:
            if os.path.isdir(child):
                total += recurse_count(child)
            else:
                try:
                    with open(child) as f:
                        lines = f.readlines()
                        
                        if args.skip_blank:
                            lines = [ x for x in lines if len(x.strip()) ]
                        line_count = len(lines)

                        print(f"{CS}{line_count}{CE}\t{child}")
                        total += line_count
                except UnicodeDecodeError:
                    error(child, "file contains non-UTF8 characters")
                except PermissionError:
                    error(parent, "permission to read denied")
        except KeyboardInterrupt:
            breaking = True
            return total

    return total

grand_total = 0

if len(args.directory) == 0:
    args.directory.append(".")

for directory in args.directory:
    print(f"\nDIRECTORY {directory}\n")
    total = recurse_count(directory)
    grand_total += total 
    print(f"\nTOTAL {total}")

if len(args.directory) > 1:
    print(f"\nGRAND TOTAL {grand_total}")